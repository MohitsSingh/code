function net = cnn_mnist_init_multi(varargin)
% CNN_MNIST_LENET Initialize a CNN similar for MNIST
opts.useBnorm = true ;
opts.subset = [];
opts.K = 1;
opts = vl_argparse(opts, varargin) ;

rng('default');
rng('shuffle') ;

f=1/100 ;
net.layers = {} ;
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{f*randn(5,5,1,20, 'single'), zeros(1, 20, 'single')}}, ...
    'stride', 1, ...
    'pad', 0) ;
net.layers{end+1} = struct('type', 'pool', ...
    'method', 'max', ...
    'pool', [2 2], ...
    'stride', 2, ...
    'pad', 0) ;
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{f*randn(5,5,20,50, 'single'),zeros(1,50,'single')}}, ...
    'stride', 1, ...
    'pad', 0) ;
net.layers{end+1} = struct('type', 'pool', ...
    'method', 'max', ...
    'pool', [2 2], ...
    'stride', 2, ...
    'pad', 0) ;
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{f*randn(4,4,50,500, 'single'),  zeros(1,500,'single')}}, ...
    'stride', 1, ...
    'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') ;
K = opts.K;
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{f*randn(1,1,500,K, 'single'), zeros(1,K,'single')}}, ...
    'stride', 1, ...
    'pad', 0) ;

net.layers{end+1} = struct('type', 'loss');

% optionally switch to batch normalization
if opts.useBnorm
    net = insertBnorm(net, 1) ;
    net = insertBnorm(net, 4) ;
    net = insertBnorm(net, 7) ;
end

% --------------------------------------------------------------------
function net = insertBnorm(net, l)
% --------------------------------------------------------------------
assert(isfield(net.layers{l}, 'weights'));
ndim = size(net.layers{l}.weights{1}, 4);
layer = struct('type', 'bnorm', ...
    'weights', {{ones(ndim, 1, 'single'), zeros(ndim, 1, 'single')}}, ...
    'learningRate', [1 1], ...
    'weightDecay', [0 0]) ;
net.layers{l}.biases = [] ;
net.layers = horzcat(net.layers(1:l), layer, net.layers(l+1:end)) ;
